/*
 * static 제한자(수정자)
 * -메모리에 생성되는 멤버변수와 메소드의 갯수를 제한(1개)
 * -클래스 당 하나만 생성
 */
class PrivateConstructor{
	//생성자를 정의할 때 최고 보안 등급인 private을 사용.
	//-다른 클래스에서 new 클래스명()명령어가 실행되지 앟도록 막는 방법
	//-활용 예) 나중에 데이터베이스 프로그래밍, Math 클래스 등
	//메모리 공간을 절약하는 기법.
	private PrivateConstructor() {
		System.out.println("private로 만든 생성자.");
	}
	public static int abs(int a) {
		System.out.println("static int abs (int a) 메소드가 호출됨");
		return a<0? -a:a;
	}
}
public class MainClass {
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MainClass a = new MainClass();
		//2. 특수한 경우로는 기본 생성자를 정의할 때 private 예약어를 사용한다.
		//private 예약어의 기본성질: 생성자를 정의한 클래스 내부에서만 사용 가능.
		// - 클래스 외부, 다른 클래스에서는 사용 불가능
		// -  개념: 메모리에 생성되는 멤버변수와 메소드의 갯수를 하나로 제한
//		Math a = new Math();//안됨. f3을누르면 그 해당 클래스의 정의부분에 들어가진다. 이건 private로 생성자를 생성했기 때문에 안됨.
		//PrivateConstructor p = new Constructor();//이걸 보면 알 수 있음.
	}

}
