/*
 * 1. 상속을 사용해서 Point 클래스와 ColorPoint 클래스를 정의
 * - 클래스 간으 ㅣ관계를 설정: 부모 클래스는 Point, 자식 클래스는 ColorPoint
 * Point
 * ColorPoint
 */
class Point {
	//새로운 메소드를 추가하세요
	//- 기능 : Point 클래스가 갖고 있는 모든 멤버변수들의 값을 화면에 표시
	// - 꼭 매개변수인 p를 선언해야 합니다. 이유는 객체 a와 객체 b를 연결하기 위해서
	//  -즉 main()메소드 안에서 선언한 객체 a와 객체 b를 찾아갈 때사용.
	//   -private 접근 제한자를 갖고 있는 color는 제외.
	
	// - 하지만, private 접근 제한자를 갖고 있는 color는 제외.
	protected int m_x, m_y;
	//색상을 문자열로 추가: 문자열은 String클래스를 사용
	//멤버 변수를 선언
	private String color="빨강";//여기 있는 것들은 모두 전역변수.
	//멤버 변수를 선언->전역 변수(모든 메소드에서 함께 사용) -> UML에서 다룸.
	String color2="파랑";//접근지정자를 붙이면 전역변수가 된다. 즉 이 부분에서 사용해야한다
	public String color3="노랑";
	protected String color4="초록"; // 같은 패키지 + 다른 패키지(하지만 상속 관계)
	String favColor = new String();
	
	Point(){
		m_x = 0;
		m_y = 0;
	};
	Point(int x, int y){
		m_x = x;
		m_y = y;
	}
	
	// 좋아하시는 색상 이름을 문자열로 보관할 수 있는 멤버변수를 선언 + 초기화
	//-주의사항: 위에서 선언한 이름과는 다른 이름을 사용
	//- 현재 사용하고 있는 멤버변수 이름 목록:color, color2,color3, color4
	
	public int getx()
	{
		return m_x;
	}
	public int gety()
	{
		return m_y;
	}
	
	public void set(int x, int y)
	{
		m_x = x;
		m_y = y;
	}
	public void method() {
		//private String avs = "뭐"; 지역변수는 접근지정자를 넣을 수 없음.
		//Life Cycle이 다름. 함수 외부에서 호출되는 당시에 스택 메모리에 생성
		//-함수가 종료되면 스택 메모리에서 제거
		//JVM: Java Virtual Machine(프로그램)
		//private Stringg color 멤버변수 이름을 사용해서 현재 갖고 있는 //색상 이름을 읽어와서 화면에 표시하기.
		System.out.println("private 멤버변수인 color의 값은 " + color);
	}
	public void showPoint()
	{
		System.out.println(m_x+m_y);
	}
	//위에서 만든 set함수는 한번에 2개를 다 바꾸는 함수지만 단점은 값을 알아야한다는 것. 이제 한개씩 받아와서 한개씩 바꿀 함숮를 만든다.
	public void setX(int x) {
		System.out.println("x값만을 변경");
		m_x = x;
	}
	public void setY(int y) {
		System.out.println("y값만을 변경");
		m_y = y;
	}
}

class ColorPoint extends Point{
	ColorPoint() {
		
		// TODO Auto-generated constructor stub
	}
	ColorPoint(int x, int y) {
		super(x,y);
		m_x= x;
		m_y= y;
		// TODO Auto-generated constructor stub
	}

	public void showPoint()
	{
		System.out.println((m_x+3)+(m_y+3));
	}
}
public class TestPoint2 {
	public void show(Point p){
		//System.out.println(p.color);
		System.out.println(p.color2);
		//System.out.println(a.color);
		System.out.println(p.color3);
		System.out.println(p.color4);
	}
	public void pointMethod(Point p){
		p.method();
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Point a = new Point(2,3);
		ColorPoint b = new ColorPoint();
		System.out.println(a.color2);
		//System.out.println(a.color);
		System.out.println(a.color3);
		System.out.println(a.color4);
		a.showPoint();
		b.set(30, 50);
		b.showPoint();
		b.setX(0);
		b.setY(0);
		b.showPoint();
		a.showPoint();
		a.favColor = "하얀색";
		System.out.println(a.favColor);
		//오류가 발생하는 이유: show() 메소드를 호출하는 main()메소드의 제한자는
		TestPoint2 t = new TestPoint2();
		t.show(a);//혹은 static을 붙이는 방법.
		t.pointMethod(a);
	}

}
